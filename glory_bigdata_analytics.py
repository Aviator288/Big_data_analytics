# -*- coding: utf-8 -*-
"""Glory_Bigdata_analytics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ui0fsKezjKncDv5IewpY0mtDP3-ikpft
"""

#Name: Glory Joe-Ibekwe
#Student number: 2144448

!apt-get install openjdk-8-jdk-headless -qq > /dev/null

!wget -q https://archive.apache.org/dist/spark/spark-3.2.0/spark-3.2.0-bin-hadoop3.2.tgz

!tar xf spark-3.2.0-bin-hadoop3.2.tgz

!pip install -q findspark

import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"
os.environ["SPARK_HOME"] = "/content/spark-3.2.0-bin-hadoop3.2"

import findspark
findspark.init()
import pyspark
from pyspark.sql import SparkSession
spark = SparkSession.builder.master("local[*]").getOrCreate()

#Simple Linear Regression Model
from google.colab import files
files.upload()

from pyspark.ml.feature import VectorAssembler
from pyspark.ml.regression import LinearRegression
dataset = spark.read.csv('BostonHousing (1).csv', inferSchema=True, header=True)
dataset.printSchema()

#Input all the features in one vector column
assembler = VectorAssembler(inputCols=['crim','zn','indus','chas','nox','rm','age','dis','rad','tax','ptratio','b','lstat'],outputCol='Attributes')
output = assembler.transform(dataset)
#input vs output
finalized_data = output.select("Attributes", "medv")
finalized_data.show()

#slipt training and test data
train_data, test_data = finalized_data.randomSplit([0.80, 0.2])
regression = LinearRegression(featuresCol= 'Attributes', labelCol='medv')

#learn to fit the model from trainig set
regression = regression.fit(train_data)
#to predict the prices on testing set
pred = regression.evaluate(test_data)

#predict the model
pred.predictions.show()

#coefficient of the regression model
coeff = regression.coefficients
#x and Y intercept
intr = regression.intercept
print("The coefficient of the model is : %a" %coeff)
print("The Intercept of the model is : %f" %intr)

from pyspark.ml.evaluation import RegressionEvaluator
eval = RegressionEvaluator(labelCol="medv", predictionCol="prediction", metricName="rmse")

#Root Mean Square Error
rmse = eval.evaluate(pred.predictions)
print("RMSE: %.3f" %rmse)

#mean Square Error
mse = eval.evaluate(pred.predictions, {eval.metricName:"mse"})
print("MSE: %.3f" %mse)

#mean Absolute Error
mae = eval.evaluate(pred.predictions, {eval.metricName:"mae"})
print("MAE: %.3f" %mae)

# r2 - coefficient of determination
r2 = eval.evaluate(pred.predictions, {eval.metricName:"r2"})
print("r2: %.3f" %r2)